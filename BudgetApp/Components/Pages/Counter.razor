@page "/counter"
@using BlazorLogic
@rendermode InteractiveServer

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<input type="text" @bind="totalBudget" placeholder="enter total budget" />
<p role="status">Current Budget: @totalBudget</p>
<button class="btn btn-primary" @onclick="DisplayTotalBudget">Click me to update the budget</button>

<!-- Button to trigger modal -->
<button @onclick="ShowModal">Open Modal</button>

<div class="dictionary-container">
    @foreach(var kvp in this.DisplayCategories())
    {
        <div class="dictionary-item" @onclick="() => DisplaySpecific(kvp.Key)">
            <div class="key">@kvp.Key</div>
            <div class="value">@kvp.Value</div>
        </div>
    }
</div>

<!-- Enter a new category modal popup-->
@if(specificModal){
 <div class="modal-overlay">
     <div class="modal">
        <h4>@CategoryViewing</h4>
            <div class="dictionary-container">
                <!--loops through the list of specific categories linked to this general category-->
                @if(this.GetLinkningCategories().TryGetValue(CategoryViewing, out List<string> specificsList)){
                    
                
                @foreach (var specificCategory in specificsList)
                {
                    
                    <div class="dictionary-item" >
                        <div class="key">@specificCategory</div>
                        <div class="value">@this.GetCost(specificCategory)</div>
                    </div>
                }
                }
            </div>
        <div>
            <button @onclick="CloseSpecific">Close</button>
        </div>
     </div>
 </div>
}
@code{
    private void CloseSpecific()
    {
        specificModal = false;
    }
    private Dictionary<string,List<string>> GetLinkningCategories()
    {
        return thisBudget.linkingCategories;
    }
}
<!-- View specifics modal popup-->
@if(showModalNewCategory){
 <div class="modal-overlay">
     <div class="modal">
        <h4>Enter Your New Category</h4>
        <div>
            <label for="NewGenericCategory">New General Category:</label>
            <input type="text" id="NewGenericCategoryInput" @bind="enteredNewCategory" />
        </div>
        <div>
            <button @onclick="AddNewCategory">Add</button>
        </div>
     </div>
 </div>
}

<!-- View specifics modal popup-->
@if (reassignModal)
{
    <div class="modal-overlay">
        <div class="modal">
            <h4>The specific cost you entered belongs to a different category. Do you want to keep it in the old category or 
                move it to this new category?
            </h4>
            
            <div>
                <button @onclick="Recall">OldCategory</button>
                <button @onclick="Reassign">ThisCategory</button>

            </div>
        </div>
    </div>
}
@code{
    private void Recall()
    {

        string oldCat = "placeholder";
        thisBudget.ReMap(oldCat, enteredSpecific, enteredCost, false);
        reassignModal = false;
        HideModal();
    }
    private void Reassign()
    {
        thisBudget.ReMap(selectedCategory, enteredSpecific, enteredCost, true);
        reassignModal = false;
        HideModal();
    }
}
<!-- Modal Popup -->
@if (showModal)
{
    <div class="modal-overlay">
        <div class="modal">
            
            <h4>Enter Your Information</h4>

            <div>
                <label for="SpecificCategory">Specific Category:</label>
                <input type="text" id="SpecificCategoryInput" @bind="enteredSpecific" />
            </div>

            <div>
                <label for="Amount Spent">Amount Spent:</label>
                <input type="text" id="AmountSpentInput" @bind="enteredCost" />
            </div>

            <div>
                <label for="dropdown">Choose Option:</label>
                <select id="dropdown" @bind="selectedCategory">
                    @foreach (var category in thisBudget.getCategories())
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>

            <div>
                <button @onclick="SubmitForm">Enter</button>
                <button @onclick="HideModal">Cancel</button>
            </div>
        </div>
    </div>
}


@code {
    private string CategoryViewing = string.Empty;
    private double totalBudget = 0;
    private int currentCount = 0;
    Budget thisBudget = new Budget(0);
    private bool specificModal = false;
    private Dictionary<string, double> DisplayCategories()
    {
        return thisBudget.GetCategories();
    }
    private Dictionary<string, double> DisplaySpecifics()
    {
        return thisBudget.GetSpecifics();
    }

    private double GetCost(string categorySpecific)
    {
        return thisBudget.GetSpecifics().GetValueOrDefault(categorySpecific);
    }
    private void DisplaySpecific(string general)
    {
        CategoryViewing = general;
        specificModal = true;
    }
    private void DisplayTotalBudget()
    {
        thisBudget = new Budget(totalBudget);

    }

    private void IncrementCount()
    {
        currentCount++;
    }

    private bool reassignModal = false;
    private bool showModal = false;
    private bool showModalNewCategory = false;
    private double enteredCost =0;
    private string enteredSpecific = string.Empty;
    private string enteredNewCategory = string.Empty;
    private string selectedCategory = string.Empty;


    //show when a new category is selected
    private void ShowNewCategory()
    {
        showModalNewCategory = true;
    }

    //close when a new category is entered
    private void HideNewCategory()
    {
        showModalNewCategory = false;
    }

    //show modal
    private void ShowModal()
    {
        showModal = true;
        StateHasChanged();
    }

    //hids modal
    private void HideModal()
    {
        showModal = false;
        enteredCost = 0;
        enteredSpecific = string.Empty;
        enteredNewCategory = string.Empty;
        selectedCategory = "personal";
        totalBudget = thisBudget.BudgetLeft;
    }

    private void AddNewCategory()
    {
        thisBudget.Spend(enteredNewCategory, enteredSpecific, enteredCost);
        showModalNewCategory = false;
        StateHasChanged();
    }
    //submit info in the modal
    private void SubmitForm()
    {
        //HANDLE ENTERED INFO HERE
        if(enteredSpecific == string.Empty)
        {
            enteredSpecific = "Unspecified"; 
        }
        if(selectedCategory == "new category")
        {
            showModalNewCategory = true;
            //thisBudget.Spend(enteredNewCategory, enteredSpecific, enteredCost);


        }
        else
        {
            //if this budget needs to reassign, prompt the user
            if(!(thisBudget.Spend(selectedCategory, enteredSpecific, enteredCost)))
            {
                reassignModal = true;
                //prompt new modal 
                //options: a) reassign this specific varaible to a new category(true)
                //b) choose the old category(false)

            }

        }
        totalBudget = thisBudget.BudgetLeft;
        if(reassignModal == false)
        {
            HideModal();

        }
        showModal = false;
    }
}
<style>
    /* Modal overlay (darkened background) */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000; /* Ensure modal appears on top */
    }

    /* Modal box style */
    .modal {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        width: 300px;
        max-width: 80%;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 1001; /* Ensure modal content is above the overlay */
        visibility: visible; /* Ensure modal is not hidden */
        display: block; /* Ensure it's displayed when the modal is active */
    }

        /* Modal input fields and select dropdown */
        .modal input, .modal select {
            width: 100%;
            padding: 8px;
            margin: 10px 0;
            border-radius: 4px;
            border: 1px solid #ccc;
        }

        /* Modal buttons */
        .modal button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 10px;
            margin: 5px 0;
            border-radius: 4px;
            cursor: pointer;
        }

            .modal button:hover {
                background-color: #0056b3;
            }

            .modal button:focus {
                outline: none;
            }

    .dictionary-container {
        display: grid;
        grid-template-columns: 1fr 2fr;
        gap: 15px;
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .dictionary-item {
        display: flex;
        flex-direction: row;
        align-items: center;
        padding: 10px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 1px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
    }

        .dictionary-item:hover {
            transform: scale(1.05);
        }

    .key {
        font-weight: bold;
        color: #2c3e50;
        font-size: 1.1em;
    }

    .value {
        margin-left: 10px;
        color: #34495e;
        font-size: 1em;
    }

    h3 {
        text-align: center;
        color: #34495e;
        font-family: 'Arial', sans-serif;
        margin-bottom: 20px;
    }

</style>